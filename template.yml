AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app
  Sample SAM Template for sam-app
Parameters:
  TableName:
    Type: String
    Default: test-table
  BucketName:
    Type: String
    Default: xxx
  CodeUri:
    Type: String
    Default: target/bookings-api-dev.jar
  SmsExternalId:
    Type: String
    Default: xxx
  SmsArn:
    Type: String
    Default: xxx
  SourceArnEmail:
    Type: String
    Default: xxx
  CallbackUrl:
    Type: String
    Default: xxx
  CallbackHostedUrl:
    Type: String
    Default: xxx
  CallbackHostedLogoutUrl:
    Type: String
    Default: xxx
  LogoutUrl:
    Type: String
    Default: xxx
  UserPoolId:
    Type: String
    Default: xxx
  UserPoolName:
    Type: String
    Default: dev-0925
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 1024
    Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
      Variables:
        BOOKINGS_TABLE_NAME: !Ref TableName
        USER_POOL_ID: !Ref UserPool
        BUCKET_NAME: !Ref BucketName
        ENVIRONMENT: production

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - preferred_username
      UserPoolName: !Ref UserPoolName
      AutoVerifiedAttributes:
        - email
        - phone_number
      EmailConfiguration:
        SourceArn: !Ref SourceArnEmail
      Schema:
        - AttributeDataType: String
          Name: phone_number
          Required: true
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: given_name
          Required: true
        - AttributeDataType: String
          Name: family_name
          Required: true
      SmsConfiguration:
        ExternalId: !Ref SmsExternalId
        SnsCallerArn: !Ref SmsArn
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true

  UserPoolTokenClient:
    DependsOn: UserPool
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ReadAttributes:
        - email_verified
        - sub
        - email
        - phone_number
        - given_name
        - family_name
        - preferred_username
        - phone_number_verified
      WriteAttributes:
        - email
        - phone_number
        - given_name
        - family_name
        - preferred_username
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Ref CallbackUrl
        - !Ref CallbackHostedUrl
        - https://localhost
      ClientName: vuejs-frontend-client
      SupportedIdentityProviders:
        - COGNITO
      DefaultRedirectURI: !Ref CallbackUrl
      LogoutURLs:
        - !Ref LogoutUrl
        - !Ref CallbackHostedLogoutUrl
  UserPoolAdminGroup:
    DependsOn: UserPool
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: admin-group
      GroupName: admin
      Precedence: 1
      UserPoolId: !Ref UserPool
  MyApi:
    DependsOn: UserPool
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        ApiKeyRequired: false # OPTIONAL
        DefaultAuthorizer: MyCognitoAuth # OPTIONAL, if you use IAM permissions, specify AWS_IAM.
        # For AWS_IAM:
        # DefaultAuthorizer: AWS_IAM
        # InvokeRole: NONE # CALLER_CREDENTIALS by default unless overridden
        Authorizers:
          MyCognitoAuth:
            UserPoolArn: !GetAtt "UserPool.Arn"
            # Can also accept an array
            Identity: # OPTIONAL
              Header: Authorization # OPTIONAL; Default: 'Authorization'

  GetBookingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.GetBookingHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
      Events:
        GetBooking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings/{id}
            Method: get
            RestApiId: !Ref MyApi  # Add this line

  ListBookingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.ListBookingHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
        - Statement:
            - Sid: snsaccess
              Effect: Allow
              Action:
                - sns:*
              Resource: '*'
      Events:
        GetBookings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings
            Method: get
            RestApiId: !Ref MyApi  # Add this line
  ListBookingsByUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.ListBookingsByUserHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
      Events:
        GetBooking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/{id}/bookings
            Method: get
            RestApiId: !Ref MyApi  # Add this line
  SetBookingStateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.SetBookingStateHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        SetState:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings/{id}/state
            Method: post
            RestApiId: !Ref MyApi  # Add this line
  DeleteBookingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.DeleteBookingHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        DeleteBooking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings/{id}
            Method: delete
            RestApiId: !Ref MyApi  # Add this line
  CreateBookingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.CreateBookingHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - S3ReadPolicy:
            BucketName: !Ref BucketName
      Events:
        CreateBooking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings
            Method: post
            RestApiId: !Ref MyApi  # Add this line
  UpdateBookingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.handler.UpdateBookingHandler::handleRequest
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        UpdateBooking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bookings/{id}
            Method: put
            RestApiId: !Ref MyApi  # Add this line
  MonitorEndedBookingsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.monitor.MonitorEndedBookings::lambdaHandler
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
            - Sid: snsaccess
              Effect: Allow
              Action:
                - sns:*
              Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:ListUsers
            Resource: !GetAtt "UserPool.Arn"
        #secret-arn
        #secret-name
      Events:
        EndedBookingSchedule:
          Type: Schedule
          Properties:
            State: "DISABLED"
            Schedule: "rate(1 minute)"
  MonitorEndedBookingsFunctionTemp:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.monitor.MonitorEndedBookingsTemp::lambdaHandler
      Runtime: java8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
            - Sid: snsaccess
              Effect: Allow
              Action:
                - sns:*
              Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:ListUsers
            Resource: !GetAtt "UserPool.Arn"
        #secret-arn
        #secret-name
      Events:
        EndedBookingSchedule:
          Type: Schedule
          Properties:
            State: "ENABLED"
            Schedule: "rate(1 minute)"

  MonitorStartedBookingsFunction:
    Type: AWS::Serverless::Function # More info about function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: target/bookings-api-dev.jar
      Handler: com.wirelessiths.monitor.MonitorStartedBookings::lambdaHandler
      Runtime: java8
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - Statement:
            - Sid: snsaccess
              Effect: Allow
              Action:
                - sns:*
              Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:ListUsers
            Resource: !GetAtt "UserPool.Arn"
        #secret-arn
        #secret-name
      Events:
        StartedBookingSchedule:
          Type: Schedule
          Properties:
            State: "ENABLED"
            Schedule: "rate(1 minute)"
  BookingsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: scooterId
          AttributeType: S
        - AttributeName: startTime
          AttributeType: S
        - AttributeName: endTime
          AttributeType: S
        - AttributeName: bookingId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: startDate
          AttributeType: S
        - AttributeName: endDate
          AttributeType: S
      KeySchema:
        - AttributeName: scooterId
          KeyType: HASH
        - AttributeName: endTime
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: userIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: startTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: bookingIndex
          KeySchema:
            - AttributeName: bookingId
              KeyType: HASH
            - AttributeName: startTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: endTimeIndex
          KeySchema:
            - AttributeName: endDate
              KeyType: HASH
            - AttributeName: endTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: startTimeIndex
          KeySchema:
            - AttributeName: startDate
              KeyType: HASH
            - AttributeName: startTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

Outputs:
  GetBookingFunction:
    Description: "GetBooking Lambda Function ARN"
    Value: !GetAtt GetBookingFunction.Arn

  ListBookingFunction:
    Description: "ListBooking Lambda Function ARN"
    Value: !GetAtt ListBookingFunction.Arn

  ListBookingsByUserFunction:
    Description: "ListBookingsByUser Lambda Function ARN"
    Value: !GetAtt ListBookingsByUserFunction.Arn

  DeleteBookingFunction:
    Description: "DeleteBooking Lambda Function ARN"
    Value: !GetAtt DeleteBookingFunction.Arn

  CreateBookingFunction:
    Description: "CreateBooking Lambda Function ARN"
    Value: !GetAtt CreateBookingFunction.Arn

  UpdateBookingFunction:
    Description: "UpdateBooking Lambda Function ARN"
    Value: !GetAtt UpdateBookingFunction.Arn

  SetBookingStateFunction:
    Description: "SetBookingState Lambda Function ARN"
    Value: !GetAtt SetBookingStateFunction.Arn