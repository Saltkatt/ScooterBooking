package com.wirelessiths.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_USERS_TABLE_NAME")
public class User {

    // get the table name from env. var. set in serverless.yml
    private static final String USERS_TABLE_NAME = System.getenv("USERS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String username;
    private String firstName;
    private String lastName;
    private String password;
    private String email;
    private String personalIdentificationNumber;

    @DynamoDBRangeKey(attributeName = "username")
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @DynamoDBRangeKey(attributeName = "lastName")
    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @DynamoDBRangeKey(attributeName = "password")
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    @DynamoDBRangeKey(attributeName = "email")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
    @DynamoDBRangeKey(attributeName = "personalIdentificationNumber")
    public String getPersonalIdentificationNumber() {
        return personalIdentificationNumber;
    }

    public void setPersonalIdentificationNumber(String personalIdentificationNumber) {
        this.personalIdentificationNumber = personalIdentificationNumber;
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "firstName")
    public String getFirstName() {
        return this.firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public User() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USERS_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", username='" + username + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", password='" + password + '\'' +
                ", email='" + email + '\'' +
                ", personalIdentificationNumber='" + personalIdentificationNumber + '\'' +
                '}';
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(USERS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<User> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<User> results = this.mapper.scan(User.class, scanExp);
      for (User p : results) {
        logger.info("Users - list(): " + p.toString());
      }
      return results;
    }

    public User get(String id) throws IOException {
        User user = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<User> queryExp = new DynamoDBQueryExpression<User>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<User> result = this.mapper.query(User.class, queryExp);
        if (result.size() > 0) {
          user = result.get(0);
          logger.info("User - get(): user - " + user.toString());
        } else {
          logger.info("User - get(): user - Not Found.");
        }
        return user;
    }

    public void save(User user) throws IOException {
        logger.info("User - save(): " + user.toString());
        this.mapper.save(user);
    }

    public Boolean delete(String id) throws IOException {
        User user = null;

        // get product if exists
        user = get(id);
        if (user != null) {
          logger.info("User - delete(): " + user.toString());
          this.mapper.delete(user);
        } else {
          logger.info("User - delete(): user - does not exist.");
          return false;
        }
        return true;
    }

}
