package com.wirelessiths.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_USERS_TABLE_NAME")
public class Booking {

    // get the table name from env. var. set in serverless.yml
    private static final String BOOKINGS_TABLE_NAME = System.getenv("BOOKINGS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private List<Scooter> selectedScooter;
    private User booker;
    private Date startTimer;
    private Date endTime;
    private String startPos;
    private String endPos;


    // Getters and Setters
    @DynamoDBHashKey(attributeName = "selectedScooter")
    @DynamoDBAutoGeneratedKey
    public String getSelectedScooter() {
        return this.selectedScooter;
    }
    public void setSelectedScooter(String selectedScooter) {
        this.selectedScooter = selectedScooter;
    }

    @DynamoDBRangeKey(attributeName = "booker")
    public String getBooker() {
        return booker;
    }
    public void setBooker(String booker) {
        this.booker = booker;
    }

    @DynamoDBAttribute(attributeName = "startTimer")
    public String getStartTimer() {
        return this.startTimer;
    }
    public void setStartTimer(String startTimer) {
        this.startTimer = startTimer;
    }

    @DynamoDBAttribute(attributeName = "endTime")
    public String getEndTime() {
        return endTime;
    }
    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    @DynamoDBAttribute(attributeName = "startPos")
    public String getStartPos() {
        return startPos;
    }
    public void setStartPos(String startPos) {
        this.startPos = startPos;
    }

    @DynamoDBAttribute(attributeName = "endPos")
    public String getEndPos() {
        return endPos;
    }
    public void setEndPos(String endPos) {
        this.endPos = endPos;
    }

    /*@DynamoDBAttribute(attributeName = "personalIdentificationNumber")
    public String getPersonalIdentificationNumber() {
        return personalIdentificationNumber;
    }
    public void setPersonalIdentificationNumber(String personalIdentificationNumber) {
        this.personalIdentificationNumber = personalIdentificationNumber;
    }*/

    public Booking() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(BOOKINGS_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return "Booking{" +
                "selectedScooter='" + selectedScooter + '\'' +
                ", booker='" + booker + '\'' +
                ", startTimer='" + startTimer + '\'' +
                ", endTime='" + endTime + '\'' +
                ", startPos='" + startPos + '\'' +
                ", endPos='" + endPos + '\'' +
                '}';
    }

    // Methods
    public Boolean ifTableExists() {
        return this.client.describeTable(BOOKINGS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Booking> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<Booking> results = this.mapper.scan(Booking.class, scanExp);
      for (Booking p : results) {
        logger.info("Bookings - list(): " + p.toString());
      }
      return results;
    }

    public Booking get(String id) throws IOException {
        Booking booking = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Booking> queryExp = new DynamoDBQueryExpression<Booking>()
            .withKeyConditionExpression("selectedScooter = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Booking> result = this.mapper.query(Booking.class, queryExp);
        if (result.size() > 0) {
          booking = result.get(0);
          logger.info("Booking - get(): booking - " + booking.toString());
        } else {
          logger.info("Booking - get(): booking - Not Found.");
        }
        return booking;
    }

    public void save(Booking booking) throws IOException {
        logger.info("Booking - save(): " + booking.toString());
        this.mapper.save(booking);
    }

    public Boolean delete(String id) throws IOException {
        Booking booking = null;

        // get product if exists
        booking = get(id);
        if (booking != null) {
          logger.info("Booking - delete(): " + booking.toString());
          this.mapper.delete(booking);
        } else {
          logger.info("Booking - delete(): booking - does not exist.");
          return false;
        }
        return true;
    }

}
