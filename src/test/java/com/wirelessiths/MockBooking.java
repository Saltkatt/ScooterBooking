package com.wirelessiths;

import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.wirelessiths.dal.InstantConverter;
import com.wirelessiths.dal.LocalDateConverter;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@DynamoDBTable(tableName = "bookings-test")
public class MockBooking {

    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    //private final DynamoDB client;

    //private Logger logger = Logger.getLogger(this.getClass());

    private String bookingId;
    private String scooterId;
    private String userId;
    private LocalTime startTime;
    private LocalTime endTime;
    private String validationKey;//====================================
    private LocalDate bookingDate;      //=============================


    public MockBooking() {
        this.client = AmazonDynamoDBClientBuilder.standard()
                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", Regions.US_EAST_1.getName()))
                .build();

        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride("bookings-test-3"))
                .build();

        // create the mapper with config
        mapper = new DynamoDBMapper(this.client, mapperConfig);
    }

    public MockBooking(LocalDate date, String scooterId, LocalTime start, LocalTime stop){
        this();
        this.bookingDate = date;
        this.scooterId = scooterId;
        this.startTime = start;
        this.endTime = stop;
        this.validationKey = composeValidationKey();
    }

    private String composeValidationKey(){
        StringBuilder sb = new StringBuilder();
        sb.append(scooterId)
                .append("#")
                .append(startTime)
                .append("#")
                .append(endTime);
        return sb.toString();
    }
    @DynamoDBRangeKey(attributeName = "validationKey")
    public String getValidationKey() {
        return validationKey;
    }

    public void setValidationKey(String validationKey) {
        this.validationKey = validationKey;
    }
    @DynamoDBTypeConverted( converter = LocalDateConverter.class )
    @DynamoDBHashKey(attributeName = "bookingDate")
    public LocalDate getDate() {
        return bookingDate;
    }

    public void setDate(LocalDate date) {
        this.bookingDate = date;
    }

    //@DynamoDBHashKey(attributeName = "bookingId")
    @DynamoDBAutoGeneratedKey
    public String getBookingId() {
        return bookingId;
    }
    public void setBookingId(String bookingId) {
        this.bookingId = bookingId;
    }


    @DynamoDBAttribute(attributeName = "scooterId")
    public String getScooterId() {
        return this.scooterId;
    }
    public void setScooterId(String scooterId) {
        this.scooterId = scooterId;
    }

    //@DynamoDBIndexHashKey(attributeName = "userId", globalSecondaryIndexName = "nameIndex")
    public String getUserId() {
        return userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }



    @DynamoDBTypeConverted( converter = InstantConverter.class )
    //@DynamoDBIndexHashKey(attributeName = "startTime", globalSecondaryIndexName = "timeIndex")
    @DynamoDBAttribute(attributeName = "startTime")
    public LocalTime getStartTime() {
        return startTime;
    }
    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    @DynamoDBTypeConverted( converter = InstantConverter.class )
    //@DynamoDBIndexRangeKey(attributeName = "endTime", globalSecondaryIndexName = "timeIndex")
    @DynamoDBAttribute(attributeName = "endTime")
    public LocalTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    public String validateBooking(MockBooking booking){

        StringBuilder startRange = new StringBuilder();
        StringBuilder endRange = new StringBuilder();

        startRange.append(booking.getScooterId())
                .append("#")
                .append(booking.getStartTime().minusHours(1).toString())
                .append("#")
                .append(booking.getStartTime().toString());

        endRange.append(booking.getScooterId())
                .append("#")
                .append(booking.getEndTime().toString())
                .append("#")
                .append(booking.getEndTime().toString());


        Map<String, AttributeValue> values = new HashMap<>();
        values.put(":val1", new AttributeValue().withS(this.bookingDate.toString()));
        values.put(":val2", new AttributeValue().withS(startRange.toString()));
        values.put(":val3", new AttributeValue().withS(endRange.toString()));

        DynamoDBQueryExpression<MockBooking> qp = new DynamoDBQueryExpression<>();
        qp.withKeyConditionExpression("bookingDate = :val1 and validationKey between :val2 and :val3")
                .withExpressionAttributeValues(values);

        List<MockBooking> bookings = mapper.query(MockBooking.class, qp);

        System.out.println("Infringing bookings:");
        for (MockBooking returnedBooking : bookings) {
            System.out.println(returnedBooking.toString());
        }


//        DynamoDBQueryExpression<MockBooking> qp = new DynamoDBQueryExpression<>();
//        qp.setHashKeyValues(booking);
//        qp.setRangeKeyConditions();
//        qp.withRangeKeyCondition("validationKey",)
//        qp.withRangeKeyCondition()
//        qp.withKeyConditionExpression("date = :val1 and validationKey between :val2 and :val3")
        return null;
    }

    public List<MockBooking> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<MockBooking> results = this.mapper.scan(MockBooking.class, scanExp);
        for (MockBooking p : results) {
            //logger.info("Booking - list(): " + p.toString());
        }
        return results;
    }

    public MockBooking get(String id) throws IOException {
        MockBooking mock = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<MockBooking> queryExp = new DynamoDBQueryExpression<MockBooking>()
                .withKeyConditionExpression("bookingId = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<MockBooking> result = this.mapper.query(MockBooking.class, queryExp);
        if (result.size() > 0) {
            mock = result.get(0);

        } else {

        }
        return mock;
    }

    public void save(MockBooking booking) throws IOException {
        //logger.info("Booking - save(): " + booking.toString());
            this.mapper.save(booking);
    }

    public void update(MockBooking mockBooking) throws  IOException {

        DynamoDBMapperConfig dynamoDBMapperConfig = new DynamoDBMapperConfig.Builder()
                .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)
                .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES)
                .build();
        this.mapper.save(mockBooking, dynamoDBMapperConfig);
    }

    @Override
    public String toString() {
        return "MockBooking{" +
                ", bookingId='" + bookingId + '\'' +
                ", scooterId='" + scooterId + '\'' +
                ", userId='" + userId + '\'' +
                ", startTime=" + startTime +
                ", endTime=" + endTime +
                ", validationKey='" + validationKey + '\'' +
                ", date=" + bookingDate +
                '}';
    }
}
