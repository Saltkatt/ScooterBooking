package com.wirelessiths;

import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.wirelessiths.dal.LocalDateTimeConverter;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "bookings-test")
public class MockBooking {

    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    //private Logger logger = Logger.getLogger(this.getClass());

    private String bookingId;
    private String scooterId;
    private String userId;
    private LocalDateTime startTime;
    private LocalDateTime endTime;

    public MockBooking() {

        this.client = AmazonDynamoDBClientBuilder.standard()
                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", Regions.US_EAST_1.getName()))
                .build();

        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride("bookings-test"))
                .build();

        // create the mapper with config
        mapper = new DynamoDBMapper(this.client, mapperConfig);


    }

    @DynamoDBHashKey(attributeName = "bookingId")
    @DynamoDBAutoGeneratedKey
    public String getBookingId() {
        return bookingId;
    }
    public void setBookingId(String bookingId) {
        this.bookingId = bookingId;
    }


    @DynamoDBAttribute(attributeName = "scooterId")
    public String getScooterId() {
        return this.scooterId;
    }
    public void setScooterId(String scooterId) {
        this.scooterId = scooterId;
    }

    @DynamoDBIndexHashKey(attributeName = "userId", globalSecondaryIndexName = "nameIndex")
    public String getUserId() {
        return userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }



    @DynamoDBTypeConverted( converter = LocalDateTimeConverter.class )
    @DynamoDBIndexHashKey(attributeName = "startTime", globalSecondaryIndexName = "timeIndex")
    public LocalDateTime getStartTime() {
        return startTime;
    }
    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    @DynamoDBTypeConverted( converter = LocalDateTimeConverter.class )
    @DynamoDBIndexRangeKey(attributeName = "endTime", globalSecondaryIndexName = "timeIndex")
    public LocalDateTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    public List<MockBooking> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<MockBooking> results = this.mapper.scan(MockBooking.class, scanExp);
        for (MockBooking p : results) {
            //logger.info("Booking - list(): " + p.toString());
        }
        return results;
    }

    public MockBooking get(String id) throws IOException {
        MockBooking mock = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<MockBooking> queryExp = new DynamoDBQueryExpression<MockBooking>()
                .withKeyConditionExpression("bookingId = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<MockBooking> result = this.mapper.query(MockBooking.class, queryExp);
        if (result.size() > 0) {
            mock = result.get(0);

        } else {

        }
        return mock;
    }

    public void save(MockBooking booking) throws IOException {
        //logger.info("Booking - save(): " + booking.toString());
            this.mapper.save(booking);
    }

    public void update(MockBooking mockBooking) throws  IOException {

        DynamoDBMapperConfig dynamoDBMapperConfig = new DynamoDBMapperConfig.Builder()
                .withConsistentReads(DynamoDBMapperConfig.ConsistentReads.CONSISTENT)
                .withSaveBehavior(DynamoDBMapperConfig.SaveBehavior.UPDATE_SKIP_NULL_ATTRIBUTES)
                .build();
        this.mapper.save(mockBooking, dynamoDBMapperConfig);
    }
}
